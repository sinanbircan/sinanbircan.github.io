{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","_ref","searchChange","react_default","a","createElement","className","type","onChange","placeholder","Scroll","props","children","Card","id","name","email","alt","src","concat","CardList","robots","map","robot","components_Card","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchInput","target","value","state","_this2","fetch","then","response","json","_this3","filteredRobots","filter","toLowerCase","includes","components_SearchBox","src_components_Scroll","components_CardList","Component","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCLSC,SAXG,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,aAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACZH,EAAAC,EAAAC,cAAA,SAAOE,KAAM,SACNC,SAAUN,EACVO,YAAa,gBACbH,UAAW,wCCGfI,SARA,SAACC,GACZ,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACXK,EAAMC,YCaJC,EAjBF,SAACF,GAAU,IAEhBG,EAGAH,EAHAG,GACAC,EAEAJ,EAFAI,KACAC,EACAL,EADAK,MAEJ,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qDACZH,EAAAC,EAAAC,cAAA,OAAKY,IAAK,aAAcC,IAAG,wBAAAC,OAA0BL,KACrDX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKU,GACLZ,EAAAC,EAAAC,cAAA,SAAIW,MCFLI,EARE,SAAAnB,GAAc,IAAZoB,EAAYpB,EAAZoB,OACf,OACIlB,EAAAC,EAAAC,cAAA,WACKgB,EAAOC,IAAI,SAAAC,GAAK,OAAIpB,EAAAC,EAAAC,cAACmB,EAAD,CAAMC,IAAKF,EAAMT,GAAIA,GAAIS,EAAMT,GAAIC,KAAMQ,EAAMR,KAAMC,MAAOO,EAAMP,YCoCpFU,cAnCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CACVC,YAAaF,EAAMG,OAAOC,SAd9BZ,EAAKa,MAAQ,CACTH,YAAa,GACbhB,OAAQ,IAJFM,mFAQM,IAAAc,EAAAX,KAChBY,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAQ,OAAIH,EAAKL,SAAS,CAACf,OAAQuB,uCASxC,IAAAE,EAAAhB,KACCiB,EAAiBjB,KAAKU,MAAMnB,OAAO2B,OAAO,SAAAzB,GAAK,OAAIA,EAAMR,KAAKkC,cAAcC,SAASJ,EAAKN,MAAMH,YAAYY,iBAElH,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAAf,eACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAWjD,aAAc4B,KAAKI,iBAC9B/B,EAAAC,EAAAC,cAAC+C,EAAD,KACIjD,EAAAC,EAAAC,cAACgD,EAAD,CAAUhC,OAAQ0B,aA7BpBO,aCClBC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SN0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.7560a3b4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className={\"pa2\"}>\n            <input type={\"search\"}\n                   onChange={searchChange}\n                   placeholder={\"search robots\"}\n                   className={\"pa3 ba b--green bg-lightest-blue\"}/>\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from \"react\";\nimport \"./Scroll.css\"\n\nconst Scroll = (props) => {\n    return (\n        <div className={\"scroll\"}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from \"react\";\n\nconst Card = (props) => {\n    const {\n        id,\n        name,\n        email\n    } = props;\n    return (\n        <div className={\"bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5\"}>\n            <img alt={\"Robot here\"} src={`https://robohash.org/${id}`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {robots.map(robot => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>)}\n        </div>\n    );\n};\n\nexport default CardList;","import React, {Component} from \"react\";\nimport \"./App.css\"\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport CardList from \"../components/CardList\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            searchInput: \"\",\n            robots: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(response => this.setState({robots: response}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({\n            searchInput: event.target.value\n        });\n    };\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(this.state.searchInput.toLowerCase()));\n\n        return (\n            <div className={\"tc\"}>\n                <h1 className={\"title f1\"}>Hurdy Gurdy</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots}/>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"tachyons\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}